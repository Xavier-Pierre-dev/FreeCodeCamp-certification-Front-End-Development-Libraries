(function ($) {
    $(function () {
        var containerNames = {
            "email-text-field-input": "email-text-field-container",
            "text-field-input": "text-field-container",
            "paragraph-text-field-textarea": "paragraph-text-field-container",
            "dropdown-list-field-select": "dropdown-list-field-container",
            "checkboxes-field-input": "checkboxes-field-container",
            "multiple-choice-field-input": "multiple-choice-field-container",
            "user-status-email-input": "user-status-email-container",
            "dropdown-list-field-textarea": "dropdown-list-field-container"
        };

        function handleValidation(e) {
            if (typeof e.target.validity === 'undefined')
                return;
            var inputFieldType = $(e.target).data("sfRole");
            var hasRegularExpressionError = _validateParagraphRegularExpression();
            var validationMessages = getValidationMessages(e.target);

            if (e.target.required && e.target.validity.valueMissing) {
                setErrorMessageClasses(e.target, validationMessages.required);
            } else if ((inputFieldType === "paragraph-text-field-textarea" || inputFieldType === "dropdown-list-field-textarea") && (e.target.validity.tooShort || e.target.validity.tooLong)) {
                setErrorMessageClasses(e.target, validationMessages.maxLength);
            }
            else if (inputFieldType === "paragraph-text-field-textarea" && $(e.target).attr('pattern') && hasRegularExpressionError) {
                setErrorMessageClasses(e.target, validationMessages.regularExpression);
                _setErrorMessage(e.target, validationMessages.regularExpression)
                var errorContainer = _getErrorMessageContainer(e.target);
            }
            else {
                setErrorMessageClasses(e.target, '');
            }

            e.target.setCustomValidity($(errorContainer).hasClass("sfError") ? validationMessages.regularExpression : "");
        }

        function onChange(e) {
            handleValidation(e);
        }

        function onInput(e) {
            handleValidation(e);
        }

        function changeOrInput(e) {
            if (e.target.value === '') {
                var validationMessages = getValidationMessages(e.target);
                setErrorMessageClasses(e.target, validationMessages.required);
            }
            else {
                setErrorMessageClasses(e.target, '');
            }
        }

        function _setErrorMessage(input, message) {
            var errorMessagesContainer = _getErrorMessageContainer(input);

            if (errorMessagesContainer) {
                _toggleCustomErrorMessage(errorMessagesContainer, message);
            } else {
                input.setCustomValidity(message);
            }
        }

        function _toggleCustomErrorMessage(container, message) {
            container.innerText = message;

            if (message === '') {
                container.style.display = 'none';
            } else {
                container.style.display = 'block';
            }
        }

        function changeOrInputCheckbox(e) {
            var container = $(e.target).parents('[data-sf-role="checkboxes-field-container"]');
            var inputs = $(container).find('[data-sf-role="checkboxes-field-input"]');
            var hasChecked = $(container).find('input[data-sf-role="checkboxes-field-input"]:checked').length > 0;

            if (hasChecked || container.find('[data-sf-role="required-validator"]').val() === 'False') {
                setErrorMessageClasses(inputs[0], '');
            }
        };

        function changeOrInputMultipleChoice(e) {
            var container = $(e.target).parents('[data-sf-role="multiple-choice-field-container"]');
            var inputs = $(container).find('[data-sf-role="multiple-choice-field-input"]');
            inputs.each(function (index, input) {
                setErrorMessageClasses(input, '');
            });
        };

        function isEmptyInput(input) {
            return input.match('^\\s*$');
        }

        function invalid(e) {
            var inputFieldType = $(e.target).data("sfRole");

            if (inputFieldType === "dropdown-list-field-select" ||
                inputFieldType === "checkboxes-field-input" ||
                inputFieldType === "multiple-choice-field-input") {
                var validationMsgs = getValidationMessages(e.target);

                if (_getErrorMessageContainer(e.target)) {
                    e.preventDefault();
                }

                if (e.target.validity.valueMissing) {
                    setErrorMessageClasses(e.target, validationMsgs.required);
                }

                return;
            }

            if (typeof e.target.validity === 'undefined')
                return;

            if (_getErrorMessageContainer(e.target)) {
                e.preventDefault();
            }

            var validationMessages = getValidationMessages(e.target);

            if (inputFieldType === "paragraph-text-field-textarea" || inputFieldType === "dropdown-list-field-textarea") {
                if (e.target.validity.valueMissing) {
                    setErrorMessageClasses(e.target, validationMessages.required);
                }
                else if (e.target.validity.tooShort || e.target.validity.tooLong) {
                    setErrorMessageClasses(e.target, validationMessages.maxLength);
                }
                else if (e.target.validity.patternMismatch) {
                    setErrorMessageClasses(e.target, validationMessages.maxLength);
                }
            }
            else {
                var validationRestrictions = getValidationRestrictions(e.target);
                var isValidLength = e.target.value.length >= validationRestrictions.minLength;

                if (validationRestrictions && validationRestrictions.maxLength > 0)
                    isValidLength &= e.target.value.length <= validationRestrictions.maxLength;

                if (e.target.validity.valueMissing) {
                    setErrorMessageClasses(e.target, validationMessages.required);
                }
                else if (e.target.validity.patternMismatch && !isValidLength) {
                    setErrorMessageClasses(e.target, validationMessages.maxLength);
                }
                else if (e.target.validity.patternMismatch && isValidLength) {
                    if (inputFieldType == 'text-field-input' && isEmptyInput(e.target.value)) {
                        var errorContainer = _getErrorMessageContainer(e.target);
                        if (errorContainer) {
                            errorContainer.innerText = validationMessages.required;
                        }
                    }
                    setErrorMessageClasses(e.target, validationMessages.regularExpression);
                }
                else if (!e.target.validity.valid) {
                    setErrorMessageClasses(e.target, validationMessages.invalid);
                }
            }

        }

        function getValidationMessages(input) {
            var inputFieldType = $(input).data("sfRole");
            var container = $(input).parents('[data-sf-role="' + containerNames[inputFieldType] + '"]');
            var validationMessagesInput = $(container).find('[data-sf-role="violation-messages"]');
            var validationMessages = JSON.parse(validationMessagesInput.val());

            return validationMessages;
        }

        function getValidationRestrictions(input) {
            var inputFieldType = $(input).data("sfRole");
            var container = $(input).parents('[data-sf-role="' + containerNames[inputFieldType] + '"]');
            var validationRestrictionsInput = $(container).find('[data-sf-role="violation-restrictions"]');
            var validationRestrictions = JSON.parse(validationRestrictionsInput.val());

            return validationRestrictions;
        }

        function setErrorMessageClasses(input, message) {
            var errorMessagesContainer = _getErrorMessageContainer(input);
            if (errorMessagesContainer) {
                if (message === '') {
                    $(errorMessagesContainer).removeClass("sfError");
                    $(errorMessagesContainer).parent().removeClass("sfErrorWrp");
                } else {
                    $(errorMessagesContainer).addClass("sfError");
                    $(errorMessagesContainer).parent().addClass("sfErrorWrp");
                }
            }
        }

        function _getErrorMessageContainer(input) {
            var inputFieldType = $(input).data("sfRole");
            var container = $(input).closest('[data-sf-role="' + containerNames[inputFieldType] + '"]')[0];
            if (container) {
                var errorMessagesContainer = container.querySelector('[data-sf-role="error-message"]');
                return errorMessagesContainer;
            }

            return null;
        }

        function _validateParagraphRegularExpression() {
            var textarea = $("[data-sf-role=paragraph-text-field-textarea]");
            var pattern = new RegExp(textarea.attr('pattern'));
            var regularExpressionErr = false;
            if (textarea.length != 0 && pattern) {
                // check each line of text
                $.each(textarea.val().split("\n"), function () {
                    // check if the line matches the pattern
                    var hasError = !this.match(pattern);

                    if (hasError) {
                        regularExpressionErr = true;
                    }
                });
            }

            return regularExpressionErr;
        }

        function init() {
            for (var fieldType in containerNames) {

                var containers = $('[data-sf-role="' + containerNames[fieldType] + '"]');

                if (!containers || containers.length < 1)
                    continue;

                var attachHandlersCheckboxFields = function (input) {
                    input.on('change', changeOrInputCheckbox);
                    input.on('input', changeOrInputCheckbox);
                    input.on('invalid', invalid);
                };

                var attachHandlersMultipleChoiceFields = function (input) {
                    input.on('change', changeOrInputMultipleChoice);
                    input.on('input', changeOrInputMultipleChoice);
                    input.on('invalid', invalid);
                };

                for (var i = 0; i < containers.length; i++) {
                    var input = $(containers[i]).find('[data-sf-role="' + fieldType + '"]');

                    if (input) {
                        if (fieldType === "checkboxes-field-input") {
                            attachHandlersCheckboxFields(input);
                        }
                        else if (fieldType === "multiple-choice-field-input") {
                            attachHandlersMultipleChoiceFields(input);
                        }
                        else {
                            if (fieldType !== "dropdown-list-field-select") {
                                input.on('change', onChange);
                                input.on('input', onInput);
                            } else {
                                input.on('change', changeOrInput);
                            }
                            input.on('invalid', invalid);
                        }
                    }
                }
            }
        }

        init();
    });


}(jQuery));